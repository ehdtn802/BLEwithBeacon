

public String mDeviceName;
public String mDeviceAddress;
public int mDeviceStatus;
private BluetoothGatt ble_gatt_;
public BluetoothDevice ble_device;
final ConnectActivity.GattClientCallback gatt_client_cb = new ConnectActivity.GattClientCallback();
private BluetoothAdapter mBluetoothAdapter;
private ArrayList<BluetoothGattService> mGattServices
            = new ArrayList<BluetoothGattService>();
private BluetoothGattService mDefaultService = null;
private ArrayList<BluetoothGattCharacteristic> mGattCharacteristics
            = new ArrayList<BluetoothGattCharacteristic>();
private ArrayList<BluetoothGattCharacteristic> mWritableCharacteristics
            = new ArrayList<BluetoothGattCharacteristic>();
private BluetoothGattCharacteristic mDefaultChar = null;
private boolean connected_;

 
 
 private void connectDevice(final BluetoothDevice _device) {
        // update the status
        //mConnectionState.setText( "Connecting to " + _device.getAddress() );
        mGattServices.clear();
        mGattCharacteristics.clear();
        mWritableCharacteristics.clear();

        Handler mHandler = new Handler(getApplicationContext().getMainLooper());
        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    ble_gatt_ = _device.connectGatt(getApplicationContext(), false, gatt_client_cb, BluetoothDevice.TRANSPORT_LE);
                    refreshDeviceCache(ble_gatt_);
                } else {
                    ble_gatt_ = _device.connectGatt(getApplicationContext(), false, gatt_client_cb);
                    refreshDeviceCache(ble_gatt_);
                }
            }
        }, 1000);

    }
		
		
/*Disconnect Gatt Server*/
    public void disconnectGattServer() {
        // Log.d( TAG, "Closing Gatt connection" );
        // disconnect and close the gatt
        if (ble_gatt_ != null) {
            ble_gatt_.disconnect();
            ble_gatt_.close();
        }
        // reset the connection flag
        connected_ = false;
        ble_gatt_ = null;
        mDefaultService = null;
        mGattServices.clear();
        mGattCharacteristics.clear();
        mWritableCharacteristics.clear();
        disconnectCount = 0;
        if (retry_) {
            retry_ = false;
            connectDevice(ble_device);
        } else {
            retryCount = 0;
        }
    }

    /*Gatt Client Callback class*/
    //메시지 수신
    private class GattClientCallback extends BluetoothGattCallback {
        @Override
        public void onConnectionStateChange(BluetoothGatt _gatt, int _status, int _new_state) {
            super.onConnectionStateChange(_gatt, _status, _new_state);
            Log.d("connect status", "" + _status);

            if (_status == BluetoothGatt.GATT_FAILURE) {

                if (retryCount < 3) {
                    retryCount++;
                    retry_ = true;
                    if (ble_gatt_ != null) {
                        refreshDeviceCache(ble_gatt_);
                        disconnectCount++;
                        if (disconnectCount < 2) {
                            disconnectGattServer();
                        }
                    }
                    dialogMsg = getString(R.string.connecting_to_s_logger) + " " + retryCount;
                    Message msg = bHandler.obtainMessage(Constants.CONN_SET_DIALOG_VALUE_CHANGE);
                    bHandler.sendMessage(msg);
                } else if (retryCount == 3) {
                    retryCount = 0;
                    disconnectCount++;
                    if (ble_gatt_ != null && disconnectCount < 2) {
                        disconnectGattServer();
                    }
                    Message msg = bHandler.obtainMessage(Constants.CONNECTFAIL);
                    bHandler.sendMessage(msg);

                }

                return;
            } else if (_status != BluetoothGatt.GATT_SUCCESS) {
                if (retryCount < 3) {
                    retryCount++;
                    retry_ = true;
                    if (ble_gatt_ != null) {
                        refreshDeviceCache(ble_gatt_);
                        disconnectCount++;
                        if (disconnectCount < 2) {
                            disconnectGattServer();
                        }
                    }
                    dialogMsg = getString(R.string.connecting_to_s_logger) + " " + retryCount;
                    Message msg = bHandler.obtainMessage(Constants.CONN_SET_DIALOG_VALUE_CHANGE);
                    bHandler.sendMessage(msg);
                } else if (retryCount == 3) {
                    disconnectCount++;
                    if (ble_gatt_ != null && disconnectCount < 2) {
                        disconnectGattServer();
                    }
                    Message msg = bHandler.obtainMessage(Constants.CONNECTFAIL);
                    bHandler.sendMessage(msg);
                }
                return;
            }

            if (_new_state == BluetoothProfile.STATE_CONNECTED) {
                // update the connection status message
                // set the connection flag
                Message msg = bHandler.obtainMessage(Constants.CONNECTED);
                //Bundle bundle = new Bundle();
                //bundle.putString(TOAST, _gatt.getDevice().getUuids().toString());
                bHandler.sendMessage(msg);
                connected_ = true;
                _gatt.discoverServices();
                Log.d(TAG, "Connected to the GATT server");
            } else if (_new_state == BluetoothProfile.STATE_DISCONNECTED) {
                disconnectCount++;
                if (ble_gatt_ != null && disconnectCount < 2) {
                    disconnectGattServer();
                }
            }
        }

        @Override
        public void onServicesDiscovered(BluetoothGatt _gatt, int _status) {
            super.onServicesDiscovered(_gatt, _status);
            // check if the discovery failed
            if (_status != BluetoothGatt.GATT_SUCCESS) {
                Log.e(TAG, "Device service discovery failed, status: " + _status);
                return;
            }
            // find discovered characteristics
            List<BluetoothGattCharacteristic> matching_characteristics = BluetoothUtils.findBLECharacteristics(_gatt);
            if (matching_characteristics.isEmpty()) {
                Log.e(TAG, "Unable to find characteristics");
                return;
            }
            // log for successful discovery
            checkGattServices(matching_characteristics);
            //setCharacteristicNotification(true);
            Log.d(TAG, "Services discovery is successful");
        }

        @Override
        public void onCharacteristicChanged(BluetoothGatt _gatt, BluetoothGattCharacteristic _characteristic) {
            super.onCharacteristicChanged(_gatt, _characteristic);

            Log.d(TAG, "characteristic changed: " + _characteristic.toString());
            readCharacteristic(_characteristic);
        }

        @Override
        public void onCharacteristicWrite(BluetoothGatt _gatt, BluetoothGattCharacteristic _characteristic, int _status) {
            super.onCharacteristicWrite(_gatt, _characteristic, _status);
            if (_status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "Characteristic written successfully" + _status);
            } else {
                Log.e(TAG, "Characteristic write unsuccessful, status: " + _status);
                disconnectCount++;
                if (ble_gatt_ != null && disconnectCount < 2) {
                    disconnectGattServer();
                }
            }
        }

        @Override
        public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
            super.onCharacteristicRead(gatt, characteristic, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "Characteristic read successfully");
                readCharacteristic(characteristic);
            } else {
                Log.e(TAG, "Characteristic read unsuccessful, status: " + status);
                // Trying to read from the Time Characteristic? It doesnt have the property or permissions
                // set to allow this. Normally this would be an error and you would want to:
                // disconnectGattServer();
            }
        }

        @Override
        public void onDescriptorRead(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
            super.onDescriptorRead(gatt, descriptor, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "DescriptorRead successfully");
            } else {
                Log.e(TAG, "DescriptorRead read unsuccessful, status: " + status);
            }
        }

        @Override
        public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
            super.onDescriptorWrite(gatt, descriptor, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "onDescriptorWrite successfully:" + descriptor.getUuid().toString());
            } else {
                Log.e(TAG, "onDescriptorWrite read unsuccessful, status: " + status);
            }
        }

        @Override
        public void onMtuChanged(BluetoothGatt gatt, int mtu, int status) {
            super.onMtuChanged(gatt, mtu, status);

            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "onMtuChanged successfully");
            } else {
                Log.e(TAG, "onMtuChanged read unsuccessful, status: " + status);
            }
        }

        @Override
        public void onPhyRead(BluetoothGatt gatt, int txPhy, int rxPhy, int status) {
            super.onPhyRead(gatt, txPhy, rxPhy, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "onPhyRead successfully");
            } else {
                Log.e(TAG, "onPhyRead read unsuccessful, status: " + status);
            }
        }

        @Override
        public void onPhyUpdate(BluetoothGatt gatt, int txPhy, int rxPhy, int status) {
            super.onPhyUpdate(gatt, txPhy, rxPhy, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "onPhyUpdate successfully");
            } else {
                Log.e(TAG, "onPhyUpdate read unsuccessful, status: " + status);
            }
        }

        @Override
        public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {
            super.onReadRemoteRssi(gatt, rssi, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "onReadRemoteRssi successfully");
            } else {
                Log.e(TAG, "onReadRemoteRssi read unsuccessful, status: " + status);
            }
        }


        @Override
        public void onReliableWriteCompleted(BluetoothGatt gatt, int status) {
            super.onReliableWriteCompleted(gatt, status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d(TAG, "onReliableWriteCompleted successfully");
            } else {
                Log.e(TAG, "onReliableWriteCompleted read unsuccessful, status: " + status);
            }
        }

        /*Log the value of the characteristic
        @param characteristic*/

        private void readCharacteristic(BluetoothGattCharacteristic _characteristic) {
            byte[] msg = _characteristic.getValue();
            StringBuilder sb = new StringBuilder();
            for (final byte b : msg) {
                sb.append(String.format("%02x ", b & 0xff));
            }
            Log.d("업스트림 메시지 : ", sb.toString());
	    //여기서 받은 데이터를 데이터 클래스로 전송
            upDataPro.getDataFromPacket(msg);
        }
    }


//메시지 송신
    public void sendMessage(byte[] data) {
        // check connection
        if (!connected_) {
            Log.e(TAG, "Failed to sendData due to no connection");
            connect_Timer.cancel();
            Message msg = bHandler.obtainMessage(Constants.SEND_MESSAGE_ERROR);
            bHandler.sendMessage(msg);
            return;
        }
        // find command characteristics from the GATT server
        BluetoothGattCharacteristic cmd_characteristic = BluetoothUtils.findCommandCharacteristic(ble_gatt_);
        // disconnect if the characteristic is not found
        if (cmd_characteristic == null) {
            Log.e(TAG, "Unable to find cmd characteristic");
            connect_Timer.cancel();
            Message msg = bHandler.obtainMessage(Constants.SEND_MESSAGE_ERROR);
            bHandler.sendMessage(msg);
            return;
        }
        // start stimulation
        startStimulation(cmd_characteristic, data);
    }

    ;

    /**
     * Check services and looking for writable characteristics
     */
    private int checkGattServices(List<BluetoothGattCharacteristic> gattCharacteristics) {
        if (mBluetoothAdapter == null || ble_gatt_ == null) {
            Log.d("checkGattService", "# BluetoothAdapter not initialized");
            return -1;
        }

        // Extract characteristics
        for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) {
            // Remember characteristic
            mGattCharacteristics.add(gattCharacteristic);
            Log.d("checkGattService", "# GATT UUID: " + gattCharacteristic.getUuid());

            boolean isWritable = isWritableCharacteristic(gattCharacteristic);
            if (isWritable) {
                mWritableCharacteristics.add(gattCharacteristic);
            }

            boolean isReadable = isReadableCharacteristic(gattCharacteristic);
            if (isReadable) {
                readCharacteristic(gattCharacteristic);
            }

            if (isNotificationCharacteristic(gattCharacteristic)) {
                setCharacteristicNotification(gattCharacteristic, true);
                if (isWritable && isReadable) {
                    mDefaultChar = gattCharacteristic;
                }
            }
        }

        return mWritableCharacteristics.size();
    }

    private boolean isWritableCharacteristic(BluetoothGattCharacteristic chr) {
        if (chr == null) return false;

        final int charaProp = chr.getProperties();
        if (((charaProp & BluetoothGattCharacteristic.PROPERTY_WRITE) |
                (charaProp & BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE)) > 0) {
            Log.d("WritableChar", "# Found writable characteristic");
            return true;
        } else {
            Log.d("WritableChar", "# Not writable characteristic");
            return false;
        }
    }

    private boolean isReadableCharacteristic(BluetoothGattCharacteristic chr) {
        if (chr == null) return false;

        final int charaProp = chr.getProperties();
        if ((charaProp & BluetoothGattCharacteristic.PROPERTY_READ) > 0) {
            Log.d("ReadableChara", "# Found readable characteristic");
            return true;
        } else {
            Log.d("ReadableChara", "# Not readable characteristic");
            return false;
        }
    }

    private boolean isNotificationCharacteristic(BluetoothGattCharacteristic chr) {
        if (chr == null) return false;

        final int charaProp = chr.getProperties();
        if ((charaProp & BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {
            Log.d("NotificationCha", "# Found notification characteristic \n ------" + chr.getUuid().toString());
            return true;
        } else {
            Log.d("NotificationCha", "# Not notification characteristic");
            return false;
        }
    }

    /**
     * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported
     * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}
     * callback.
     *
     * @param characteristic The characteristic to read from.
     */

    public void readCharacteristic(BluetoothGattCharacteristic characteristic) {
        if (mBluetoothAdapter == null || ble_gatt_ == null) {
            Log.d("readCharacteristic", "# BluetoothAdapter not initialized");
            return;
        }
        //ble_gatt_.readCharacteristic(characteristic);
    }

    /**
     * Enables or disables notification on a give characteristic.
     *
     * @param characteristic Characteristic to act on.
     * @param enabled        If true, enable notification.  False otherwise.
     */

    public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic,
                                              boolean enabled) {
        if (mBluetoothAdapter == null || ble_gatt_ == null) {
            Log.d("setc", "# BluetoothAdapter not initialized");
            return;
        }
//        for(BluetoothGattCharacteristic testchar : ble_gatt_.getService(UUID.fromString(SERVICE_STRING)).getCharacteristics()){
//            ble_gatt_.setCharacteristicNotification(testchar, enabled);
//        }
        ble_gatt_.setCharacteristicNotification(characteristic, enabled);

        if ((Constants.CHARACTERISTIC_COMMAND_STRING.equals(characteristic.getUuid().toString())) || (Constants.CHARACTERISTIC_RESPONSE_STRING.equals(characteristic.getUuid().toString()))) {
            Log.d("setc", "setnoti" + characteristic.getUuid().toString());

            for (BluetoothGattDescriptor descriptor : characteristic.getDescriptors()) {
                Log.e(TAG, "BluetoothGattDescriptor: " + descriptor.getUuid().toString());
            }

            BluetoothGattDescriptor descriptor = characteristic.getDescriptor(
	    	//UUID 입력
                    UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"));
            if (0 != (characteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_INDICATE)) {
                Log.d("onServicesDiscovered", "Characteristic (" + characteristic.getUuid() + ") is INDICATE");
                if (descriptor != null) {
                    descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
                    if (!ble_gatt_.writeDescriptor(descriptor)) {
                        Log.d("setc", "set ENABLE_INDICATION_VALUE 안됨");
                    }
                }
            } else {
                Log.d("onServicesDiscovered", "Characteristic (" + characteristic.getUuid() + ") is NOTIFY");
                if (descriptor != null) {
                    descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
                    if (!ble_gatt_.writeDescriptor(descriptor)) {
                        Log.d("setc", "set ENABLE_NOTIFICATION_VALUE 안됨");
                    }
                }
            }


        }


    }

   /*Start stimulation
   @param cmd_characteristic command characteristic instance
   @param program_id stimulation program id*/

    private void startStimulation(BluetoothGattCharacteristic _cmd_characteristic, byte[] data) {
        StringBuilder sb = new StringBuilder();
        for (final byte b : data) {
            sb.append(String.format("%02x ", b & 0xff));
        }
        //downStr.setText(sb.toString());
        _cmd_characteristic.setValue(data);

        // set values to the characteristic
        // write the characteristic
        boolean success = ble_gatt_.writeCharacteristic(_cmd_characteristic);
        // check the result
        if (success) {
            Log.d(TAG, "Wrote to: " + _cmd_characteristic.getUuid().toString());
            BluetoothGattCharacteristic res_characteristic = BluetoothUtils.findResponseCharacteristic(ble_gatt_);
            readCharacteristic(res_characteristic);
            // gatt_client_cb.readCharacteristic(res_characteristic);
        } else {
            Log.e(TAG, "Failed to write command");
        }
    }



    private boolean refreshDeviceCache(BluetoothGatt gatt) {
        try {
            BluetoothGatt localBluetoothGatt = gatt;
            Method localMethod = localBluetoothGatt.getClass().getMethod("refresh", new Class[0]);
            if (localMethod != null) {
                boolean bool = ((Boolean) localMethod.invoke(localBluetoothGatt, new Object[0])).booleanValue();
                return bool;
            }
        } catch (Exception localException) {
            Log.e(TAG, "An exception occured while refreshing device");
        }
        return false;
    }


    public long getLongCurrentUTC() {
        Calendar time = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        long currentTime = time.getTimeInMillis();
        return currentTime;
    }

    public String getStringCurrentUTC() {
        SimpleDateFormat dateFormatUtc = new SimpleDateFormat("YYYYMMddHHmmss");
        dateFormatUtc.setTimeZone(TimeZone.getTimeZone("UTC"));
        Date date = new Date();
        String utcTime = dateFormatUtc.format(date.getTime());
        return utcTime;
    }
